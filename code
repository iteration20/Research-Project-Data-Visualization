import pandas as pd
import numpy as np
#%matplotlib widget
from mpl_toolkits import mplot3d
import matplotlib.pyplot as plt
import seaborn as sns
import gr
df = pd.read_csv("auto_clean.csv")
df.head()

df.columns

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib notebook
fig = plt.figure(figsize=(10, 10))
#fig.colorbar(ax, location='right', anchor=(0, 0.3), shrink=0.7)
ax = plt.axes(projection="3d")
ax.scatter3D(df['length'], df['width'], df['height'],
             c = df['peak-rpm'], s = df['price']/50, alpha = 0.4)
ax.set_xlabel("Length")
ax.set_ylabel("Width")
ax.set_zlabel("Height")
ax.set_title("Relationship between height, weight, and length")
plt.show()

df.columns

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
# %matplotlib notebook
fig = plt.figure(figsize=(7, 7))
ax = plt.axes(projection="3d")
ax.scatter3D(df['curb-weight'], df['horsepower'], df['price'])
ax.set_xlabel("Length")
ax.set_ylabel("Width")
ax.set_zlabel("Height")
plt.show()

df.columns

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib notebook
def z_function(x, y):
    return np.sin(np.sqrt(x**2 + y**2))
plt.figure(figsize=(10, 10))
ax = plt.axes(projection="3d")
x = df['peak-rpm']
y = df['city-mpg']
X, Y = np.meshgrid(x, y)

Z = z_function(X, Y)
ax.contour3D(X, Y, Z, rstride=1, cstride=1,
               cmap='binary', edgecolor='none')
ax.set_xlabel("Peak RPM")
ax.set_ylabel("City-MPG")
ax.set_title("Peak RPM vs City-MPG")
ax.view_init(60, 35)
plt.show()

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib notebook
def z_function1(x, y):
    return np.cos(np.sqrt(x**2 + y**2))
plt.figure(figsize=(10, 10))
ax = plt.axes(projection="3d")
x = df['height']
y = df['width']
X, Y = np.meshgrid(x, y)

Z = z_function1(X, Y)
ax.contour3D(X, Y, Z, rstride=1, cstride=1,
               edgecolor='none')
ax.set_xlabel("Peak RPM")
ax.set_ylabel("City-MPG")
ax.set_title("Peak RPM vs City-MPG")
ax.view_init(60, 35)
plt.show()

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib notebook
#%matplotlib inline
def z_function(x, y):
    return np.sin(np.sqrt(x**2 + y**2))
plt.figure(figsize=(8, 8))
ax = plt.axes(projection="3d")
x = df['city-mpg']
y = df['highway-mpg']
z = df['price']
ax.scatter(x, y, z, cmap='viridis')
ax.view_init(20, 35)
plt.show()

df.columns

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
# %matplotlib notebook

plt.figure(figsize=(8, 8))
ax = plt.axes(projection="3d")

x = df['peak-rpm']
y = df['city-mpg']
z = z_function(x, y)
ax.plot_trisurf(x, y, z,
                cmap='viridis', edgecolor='none');
ax.set_xlabel("Peak RPM")
ax.set_ylabel("City-MPG")
ax.set_title("Peak RPM vs City-MPG")
ax.view_init(60, 25)
plt.show()

plt.figure(figsize=(10, 10))
ax = plt.axes(projection="3d")

x = df['length']
y = df['width']

X, Y = np.meshgrid(x, y)
Z = z_function(X, Y)
ax.plot_surface(X, Y, Z, rstride=1, cstride=1,
               cmap='winter', edgecolor='none')
ax.set_xlabel("Length")
ax.set_ylabel("Width")
ax.set_title("Peak RPM vs City-MPG")
ax.view_init(65, 30)

df.columns

plt.figure(figsize=(8, 8))
ax = plt.axes(projection='3d')

x = df['compression-ratio']
y = df['peak-rpm']

X, Y = np.meshgrid(x, y)
Z = z_function(X, Y)

ax.plot_wireframe(X, Y, Z, color = 'blue')
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')
ax.view_init(60, 35)
plt.figure(figsize=(8, 6))
ax = sns.scatterplot(x= "symboling",
                    y = "price",
                    hue = "gas",
                    legend = "full",
                    data = df)

max_price_per_symboling = df.groupby("symboling")["price"].mean()
sns.lineplot(data = max_price_per_symboling,
            ax = ax.axes,
            color="black")
ax.tick_params(axis='both', which="major", labelsize=12)
plt.xlabel("symboling", fontsize=12)
plt.ylabel("price", fontsize=12)
plt.show()

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib notebook
x = np.array(range(3), float)
y = x.copy()

xpos, ypos = np.meshgrid(x, y)

z = np.array([[0.23, 0.21, 0.3],
             [0.4, 0.5, 0.6],
             [0.7, 0.6, 0.9]])

colors = ["b", "g", "crimson"]*3
xpos = xpos.flatten()
ypos = ypos.flatten()
zpos = np.zeros_like(xpos)
dx = 0.5*np.ones_like(xpos)
dy = dx.copy()
dz = z.flatten()

fig = plt.figure(figsize=(10, 6))
ax = fig.add_subplot(111, projection="3d")
labels = ["Harvard", "Yale", "Berkeley"]
ax.set_xticks(range(3))
ax.set_xlabel("Ranking", labelpad = 7)
ax.set_yticks(range(3))
ax.set_yticklabels(["Admin", "Security", "Lecturer"])
ax.set_ylabel("Profession", labelpad=10)

ax.set_zticklabels([0, 20000, 40000, 60000, 80000])

#ax.set_zticks(np.arange(0.0, 1.0, 2.0))
ax.set_zlabel("Salary/$")
x_leg = plt.Rectangle((0, 0), 1, 1, fc="b")
y_leg = plt.Rectangle((0, 0), 1, 1, fc = "g")
z_leg = plt.Rectangle((0, 0), 1, 1, fc = "crimson")
ax.legend([x_leg, y_leg, z_leg], labels, fontsize=12, loc="best")

ax.bar3d(xpos, ypos, zpos, dx, dy, dz, color=colors)
